import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from vk_dating_bot.vk_tools import VKTools
from vk_dating_bot.keyboards import get_main_keyboard, get_settings_keyboard, get_search_keyboard, get_empty_keyboard
from config import GROUP_TOKEN, GROUP_ID, DEFAULT_AGE, DEFAULT_CITY, DEFAULT_CITY_TITLE
import time


class DatingBot:

    def __init__(self):
        self.vk_tools = VKTools()
        self.vk_session = vk_api.VkApi(token=GROUP_TOKEN)
        self.longpoll = VkBotLongPoll(self.vk_session, GROUP_ID)
        self.vk = self.vk_session.get_api()
        self.user_states = {}
        self.search_results = {}
        self.favorites = {}
        self.city_cache = {}

    def start(self):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                self.handle_message(event)

    def handle_message(self, event):
        user_id = event.obj.message['from_id']
        text = event.obj.message['text'].lower()

        if user_id not in self.user_states:
            self.user_states[user_id] = {
                    'search_params': {
                            'city_id':    DEFAULT_CITY,
                            'city_title': DEFAULT_CITY_TITLE,
                            'age_from':   18,
                            'age_to':     99,
                            'sex':        2  # –ü–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    },
                    'state':         None
            }

        current_state = self.user_states[user_id].get('state')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
        if current_state == 'waiting_city':
            self.process_city_input(user_id, text)
            return
        elif current_state == 'waiting_city_select':
            self.process_city_selection(user_id, text)
            return
        elif current_state == 'waiting_age_from':
            self.process_age_input(user_id, text, 'from')
            return
        elif current_state == 'waiting_age_to':
            self.process_age_input(user_id, text, 'to')
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
            self.send_welcome(user_id)
        elif text == '–ø–æ–∏—Å–∫':
            self.start_search(user_id)
        elif text == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
            self.show_settings(user_id)
        elif text == '–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥':
            self.request_city_input(user_id)
        elif text == '–∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç':
            self.request_age_range(user_id)
        elif text == '–Ω–∞–∑–∞–¥':
            self.send_welcome(user_id)
        elif text == '—Å–ª–µ–¥—É—é—â–∏–π':
            self.send_next_candidate(user_id)
        elif text == '–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.add_to_favorites(user_id)
        elif text == '—Å—Ç–æ–ø –ø–æ–∏—Å–∫':
            self.stop_search(user_id)
        elif text == '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.show_favorites(user_id)
        elif text == '–ø–æ–º–æ—â—å':
            self.send_help(user_id)
        else:
            self.process_user_info(user_id, text)

    def process_city_selection(self, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if user_id not in self.city_cache or not self.city_cache[user_id]:
            self.send_message(user_id, "–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            self.request_city_input(user_id)
            return

        cities = list(self.city_cache[user_id].keys())

        try:
            choice = int(text)
            if 1 <= choice <= len(cities):
                city_name = cities[choice - 1]
                city_id = self.city_cache[user_id][city_name]

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                self.user_states[user_id]['search_params']['city_id'] = city_id
                self.user_states[user_id]['search_params']['city_title'] = city_name
                self.user_states[user_id]['state'] = None

                message = (
                        f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {city_name}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
                )

                self.send_message(
                        user_id,
                        message,
                        keyboard=get_settings_keyboard()
                )
            else:
                self.send_message(
                        user_id,
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(cities)}:",
                        keyboard=get_empty_keyboard()
                )
        except ValueError:
            self.send_message(
                    user_id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    keyboard=get_empty_keyboard()
            )

    def send_welcome(self, user_id):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.user_states[user_id]['state'] = None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.vk_tools.get_user_info(user_id)
        if not user_info:
            self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        user_age = user_info.get('age')
        if user_age is None:
            user_age = DEFAULT_AGE
            age_note = " (–Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"
        else:
            age_note = ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
        city_id = user_info.get('city_id')
        city_title = user_info.get('city_title')
        if not city_id or not city_title:
            city_id = DEFAULT_CITY
            city_title = DEFAULT_CITY_TITLE
            city_note = " (–Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"
        else:
            city_note = ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞
        sex = user_info.get('sex')
        if sex is None:
            sex = 2
            sex_note = " (–Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"
        else:
            sex_note = ""

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        params = {
                'age':        user_age,
                'sex':        sex,
                'city_id':    city_id,
                'city_title': city_title,
                'age_from':   max(18, user_age - 5),
                'age_to':     min(99, user_age + 5)
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.user_states[user_id]['search_params'] = params

        message = (
                f"–ü—Ä–∏–≤–µ—Ç, {user_info['name']}!\n"
                f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π üòä\n\n"
                f"üîç –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: {city_title}{city_note}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_age}{age_note}\n"
                f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if sex == 2 else '–ñ–µ–Ω—Å–∫–∏–π'}{sex_note}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {params['age_from']} –¥–æ {params['age_to']} –ª–µ—Ç\n\n"
                "–ù–∞–∂–º–∏ '–ü–æ–∏—Å–∫' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!"
        )
        self.send_message(user_id, message, keyboard=get_main_keyboard())

    def start_search(self, user_id):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
        params = self.user_states[user_id]['search_params']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'sex' not in params or not params['sex']:
            params['sex'] = 2

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        age_from = int(params.get('age_from', 18))
        age_to = int(params.get('age_to', 99))

        if not isinstance(age_from, int) or age_from < 18:
            age_from = 18
        if not isinstance(age_to, int) or age_to < age_from:
            age_to = age_from + 5

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params['age_from'] = age_from
        params['age_to'] = age_to

        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if user_id in self.search_results:
            del self.search_results[user_id]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
        if 'city_id' not in params or not params['city_id']:
            params['city_id'] = DEFAULT_CITY
            params['city_title'] = DEFAULT_CITY_TITLE
            self.send_message(
                    user_id,
                    f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_CITY_TITLE}"
            )

        self.send_message(user_id, "üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...", keyboard=get_empty_keyboard())

        candidates = self.vk_tools.search_users({
                'city_id':  params['city_id'],
                'age_from': params['age_from'],
                'age_to':   params['age_to'],
                'sex':      params['sex']
        }, count=50)

        if not candidates:
            self.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî", keyboard=get_main_keyboard())
            return

        self.search_results[user_id] = candidates
        self.user_states[user_id]['current_index'] = 0

        message = (
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}\n"
                f"–ì–æ—Ä–æ–¥: {params['city_title']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: –æ—Ç {params['age_from']} –¥–æ {params['age_to']} –ª–µ—Ç\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!"
        )
        self.send_message(user_id, message, keyboard=get_search_keyboard())

    def stop_search(self, user_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞"""
        self.send_message(user_id, "–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
                          keyboard=get_main_keyboard())

    def show_settings(self, user_id):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        params = self.user_states[user_id]['search_params']
        message = (
                f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: {params.get('city_title', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {params.get('age_from', 18)} –¥–æ {params.get('age_to', 99)} –ª–µ—Ç\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        self.send_message(user_id, message, keyboard=get_settings_keyboard())

    def request_city_input(self, user_id):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
        self.user_states[user_id]['state'] = 'waiting_city'
        self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):", keyboard=get_empty_keyboard())

    def process_city_input(self, user_id, city_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
        if len(city_name) < 2:
            self.send_message(user_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        cities = self.vk_tools.find_city(city_name)

        if not cities:
            self.send_message(user_id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≥–æ—Ä–æ–¥–æ–≤
        self.city_cache[user_id] = cities

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        message = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞:\n" + "\n".join(
                [f"{i + 1}. {city}" for i, city in enumerate(cities.keys())]
        )
        message += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"

        self.send_message(user_id, message, keyboard=get_empty_keyboard())
        self.user_states[user_id]['state'] = 'waiting_city_select'

    def request_age_range(self, user_id):
        """–ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        params = self.user_states[user_id]['search_params']
        message = (
                f"–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {params.get('age_from', 18)} –¥–æ {params.get('age_to', 99)} –ª–µ—Ç\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –ª–µ—Ç):"
        )
        self.send_message(user_id, message, keyboard=get_empty_keyboard())
        self.user_states[user_id]['state'] = 'waiting_age_from'

    def process_age_input(self, user_id, text, age_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            age = int(text)
            if age < 18 or age > 99:
                self.send_message(user_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 99 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 99:")
            return

        params = self.user_states[user_id]['search_params']

        if age_type == 'from':
            params['age_from'] = age
            self.user_states[user_id]['state'] = 'waiting_age_to'
            self.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        else:
            if age < params.get('age_from', 18):
                self.send_message(user_id,
                                  "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return

            params['age_to'] = age
            self.user_states[user_id]['state'] = None

            message = (
                    f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: –æ—Ç {params['age_from']} –¥–æ {params['age_to']} –ª–µ—Ç\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
            )

            self.send_message(user_id, message, keyboard=get_settings_keyboard())

    def send_next_candidate(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        if user_id not in self.search_results or not self.search_results[user_id]:
            self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π '–ü–æ–∏—Å–∫'!")
            return

        idx = self.user_states[user_id].get('current_index', 0)
        if idx >= len(self.search_results[user_id]):
            self.send_message(user_id, "–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return

        candidate = self.search_results[user_id][idx]
        self.user_states[user_id]['current_index'] = idx + 1
        self.user_states[user_id]['current_candidate'] = candidate

        photos = self.vk_tools.get_top_photos(candidate['id'])

        message = (
                f"üë§ {candidate['name']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {candidate['profile_link']}\n"
                "üì∏ –¢–æ–ø-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:"
        )

        self.send_message(user_id, message, attachment=",".join(photos), keyboard=get_search_keyboard())

    def add_to_favorites(self, user_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        if user_id not in self.favorites:
            self.favorites[user_id] = []

        candidate = self.user_states[user_id].get('current_candidate')
        if not candidate:
            self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!")
            return

        if candidate not in self.favorites[user_id]:
            self.favorites[user_id].append(candidate)
            self.send_message(user_id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", keyboard=get_search_keyboard())
        else:
            self.send_message(user_id, "‚ùå –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!", keyboard=get_search_keyboard())

    def show_favorites(self, user_id):
        """–ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        if user_id not in self.favorites or not self.favorites[user_id]:
            self.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            return

        message = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n\n"
        for i, candidate in enumerate(self.favorites[user_id], 1):
            message += f"{i}. {candidate['name']} - {candidate['profile_link']}\n"

        self.send_message(user_id, message)

    def send_help(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        message = (
                "ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n"
                "‚Ä¢ '–ü–æ–∏—Å–∫' - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º\n"
                "‚Ä¢ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω\n"
                "‚Ä¢ '–°–ª–µ–¥—É—é—â–∏–π' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
                "‚Ä¢ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
                "‚Ä¢ '–°—Ç–æ–ø –ø–æ–∏—Å–∫' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫\n"
                "‚Ä¢ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
                "‚Ä¢ '–ü–æ–º–æ—â—å' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "–ë–æ—Ç –∏—â–µ—Ç –ª—é–¥–µ–π –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É"
        )
        self.send_message(user_id, message)

    def process_user_info(self, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        self.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º ü§ñ")

    def send_message(self, user_id, message, keyboard=None, attachment=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        params = {
                'user_id':   user_id,
                'message':   message,
                'random_id': get_random_id(),
                'keyboard':  keyboard
        }
        if attachment:
            params['attachment'] = attachment

        if params['keyboard'] is None:
            params['keyboard'] = get_main_keyboard()

        for attempt in range(3):
            try:
                self.vk.messages.send(**params)
                break
            except vk_api.exceptions.ApiError as e:
                if e.code == 6:  # Too many requests
                    time.sleep(0.5)
                else:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    break


if __name__ == "__main__":
    bot = DatingBot()
    bot.start()