import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from vk_tools import VKTools
from keyboards import get_main_keyboard, get_empty_keyboard
from config import GROUP_TOKEN, GROUP_ID, DEFAULT_AGE, DEFAULT_CITY
import time


class DatingBot:

    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ VK —Å USER_TOKEN
        self.vk_tools = VKTools()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å GROUP_TOKEN
        self.vk_session = vk_api.VkApi(token=GROUP_TOKEN)
        self.longpoll = VkBotLongPoll(self.vk_session, GROUP_ID)
        self.vk = self.vk_session.get_api()

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –ë–î)
        self.user_states = {}
        self.search_results = {}
        self.favorites = {}

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                self.handle_message(event)

    def handle_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = event.obj.message['from_id']
        text = event.obj.message['text'].lower()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states:
            self.user_states[user_id] = {'search_params': {}}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
            self.send_welcome(user_id)
        elif text == '—Å–ª–µ–¥—É—é—â–∏–π':
            self.send_next_candidate(user_id)
        elif text == '–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.add_to_favorites(user_id)
        elif text == '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.show_favorites(user_id)
        elif text == '–ø–æ–º–æ—â—å':
            self.send_help(user_id)
        else:
            self.process_user_info(user_id, text)

    def send_welcome(self, user_id):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_info = self.vk_tools.get_user_info(user_id)
        if not user_info:
            self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.user_states[user_id]['search_params'] = {
                'age':        user_info.get('age', DEFAULT_AGE),
                'sex':        user_info.get('sex'),
                'city_id':    user_info.get('city_id', DEFAULT_CITY),
                'city_title': user_info.get('city_title', '–ú–æ—Å–∫–≤–∞')
        }

        message = (
                f"–ü—Ä–∏–≤–µ—Ç, {user_info['name']}!\n"
                f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π üòä\n"
                f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: {self.user_states[user_id]['search_params']['city_title']}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {self.user_states[user_id]['search_params']['age']}\n\n"
                "–ù–∞–∂–º–∏ '–°–ª–µ–¥—É—é—â–∏–π' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
        )
        self.send_message(user_id, message, keyboard=get_main_keyboard())

    def send_next_candidate(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if user_id not in self.search_results or not self.search_results[user_id]:
            params = self.user_states[user_id]['search_params']
            candidates = self.vk_tools.search_users(params, count=50)
            self.search_results[user_id] = candidates
            self.user_states[user_id]['current_index'] = 0

            if not candidates:
                self.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
                return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        idx = self.user_states[user_id].get('current_index', 0)
        if idx >= len(self.search_results[user_id]):
            self.send_message(user_id, "–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return

        candidate = self.search_results[user_id][idx]
        self.user_states[user_id]['current_index'] = idx + 1
        self.user_states[user_id]['current_candidate'] = candidate

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos = self.vk_tools.get_top_photos(candidate['id'])

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
                f"{candidate['name']}\n"
                f"–°—Å—ã–ª–∫–∞: {candidate['profile_link']}\n"
                "–¢–æ–ø-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        self.send_message(user_id, message, attachment=",".join(photos))

    def add_to_favorites(self, user_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)"""
        if user_id not in self.favorites:
            self.favorites[user_id] = []

        candidate = self.user_states[user_id].get('current_candidate')
        if not candidate:
            self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!")
            return

        if candidate not in self.favorites[user_id]:
            self.favorites[user_id].append(candidate)
            self.send_message(user_id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            self.send_message(user_id, "‚ùå –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")

    def show_favorites(self, user_id):
        """–ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        if user_id not in self.favorites or not self.favorites[user_id]:
            self.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            return

        message = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n\n"
        for i, candidate in enumerate(self.favorites[user_id], 1):
            message += f"{i}. {candidate['name']} - {candidate['profile_link']}\n"

        self.send_message(user_id, message)

    def send_help(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        message = (
                "ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n"
                "‚Ä¢ '–°–ª–µ–¥—É—é—â–∏–π' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
                "‚Ä¢ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
                "‚Ä¢ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
                "‚Ä¢ '–ü–æ–º–æ—â—å' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "–ë–æ—Ç –∏—â–µ—Ç –ª—é–¥–µ–π –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É (¬±5 –ª–µ—Ç)"
        )
        self.send_message(user_id, message)

    def process_user_info(self, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        self.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º ü§ñ")

    def send_message(self, user_id, message, keyboard=None, attachment=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        params = {
                'user_id':   user_id,
                'message':   message,
                'random_id': get_random_id(),
                'keyboard':  keyboard or get_main_keyboard()
        }
        if attachment:
            params['attachment'] = attachment

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ "Too many requests"
        for attempt in range(3):
            try:
                self.vk.messages.send(**params)
                break
            except vk_api.exceptions.ApiError as e:
                if e.code == 6:  # Too many requests
                    time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    break


if __name__ == "__main__":
    bot = DatingBot()
    bot.start()