import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id

from database.databasework import Session
from database.models import Users, Candidates, Photos, Interactions
from vk_dating_bot.vk_tools import VKTools
from vk_dating_bot.keyboards import get_main_keyboard, get_settings_keyboard, get_search_keyboard, get_empty_keyboard
from config import GROUP_TOKEN, GROUP_ID, DEFAULT_AGE, DEFAULT_CITY, DEFAULT_CITY_TITLE
from database.crud import add_user, add_candidate_with_link, add_interaction, get_favorite_candidates

import time


class DatingBot:

    def __init__(self):
        self.vk_tools = VKTools()
        self.vk_session = vk_api.VkApi(token=GROUP_TOKEN)
        self.longpoll = VkBotLongPoll(self.vk_session, GROUP_ID)
        self.vk = self.vk_session.get_api()
        self.user_states = {}
        self.search_results = {}
        self.favorites = {}
        self.city_cache = {}

    def start(self):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                self.handle_message(event)

    def handle_message(self, event):
        user_id = event.obj.message['from_id']
        text = event.obj.message['text'].lower()

        print(f"üÜï –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}'")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_new_user = False
        if user_id not in self.user_states:
            is_new_user = True
            self.user_states[user_id] = {
                    'search_params': {
                            'city_id':    DEFAULT_CITY,
                            'city_title': DEFAULT_CITY_TITLE,
                            'age_from':   18,
                            'age_to':     99,
                            'sex':        2
                    },
                    'state':         None
            }

        current_state = self.user_states[user_id].get('state')

        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if is_new_user:
            print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
            self.send_welcome(user_id)
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
        if current_state == 'waiting_city':
            self.process_city_input(user_id, text)
            return
        elif current_state == 'waiting_city_select':
            self.process_city_selection(user_id, text)
            return
        elif current_state == 'waiting_age_from':
            self.process_age_input(user_id, text, 'from')
            return
        elif current_state == 'waiting_age_to':
            self.process_age_input(user_id, text, 'to')
            return
        elif current_state == 'waiting_manual_city':
            self.process_manual_city_input(user_id, text)
            return
        elif current_state == 'waiting_manual_age':
            self.process_manual_age_input(user_id, text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
            self.send_welcome(user_id)
        elif text == '–ø–æ–∏—Å–∫':
            self.start_search(user_id)
        elif text == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
            self.show_settings(user_id)
        elif text == '–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥':
            self.request_city_input(user_id)
        elif text == '–∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç':
            self.request_age_range(user_id)
        elif text == '–Ω–∞–∑–∞–¥':
            self.send_welcome(user_id)
        elif text == '—Å–ª–µ–¥—É—é—â–∏–π':
            self.send_next_candidate(user_id)
        elif text == '–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.add_to_favorites(user_id)
        elif text == '—Å—Ç–æ–ø –ø–æ–∏—Å–∫':
            self.stop_search(user_id)
        elif text == '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.show_favorites(user_id)
        elif text == '–ø–æ–º–æ—â—å':
            self.send_help(user_id)
        elif text == '–æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥':
            self.request_manual_city_input(user_id)
        elif text == '–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç':
            self.request_manual_age_input(user_id)
        else:
            self.process_user_info(user_id, text)


    def send_welcome(self, user_id):
        print(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        self.user_states[user_id]['state'] = None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.vk_tools.get_user_info(user_id)

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)
        if user_info is None:
            print(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.send_message(
                    user_id,
                    "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                    keyboard=get_empty_keyboard()
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            default_info = {
                    'name':       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}",
                    'age':        DEFAULT_AGE,
                    'gender':     2,
                    'city_id':    DEFAULT_CITY,
                    'city_title': DEFAULT_CITY_TITLE
            }
            self.save_user(user_id, **default_info)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.user_states[user_id]['search_params'] = {
                    'city_id':    DEFAULT_CITY,
                    'city_title': DEFAULT_CITY_TITLE,
                    'age_from':   18,
                    'age_to':     99,
                    'sex':        2
            }

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            message = (
                    "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n\n"
                    "1. –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥'\n"
                    "2. –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç'\n\n"
                    "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
            )
            self.send_message(user_id, message, keyboard=get_main_keyboard())
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        save_success = self.save_user(
                user_id,
                user_info.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"),
                user_info.get('age', DEFAULT_AGE),
                user_info.get('sex', 2),
                user_info.get('city_id', DEFAULT_CITY),
                user_info.get('city_title', DEFAULT_CITY_TITLE)
        )

        if not save_success:
            print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.save_user(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}", DEFAULT_AGE, 2, DEFAULT_CITY, DEFAULT_CITY_TITLE)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_age = user_info.get('age') or DEFAULT_AGE
        age_note = "" if user_info.get('age') else " (–Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"

        city_id = user_info.get('city_id') or DEFAULT_CITY
        city_title = user_info.get('city_title') or DEFAULT_CITY_TITLE
        city_note = "" if user_info.get('city_id') else " (–Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"

        sex = user_info.get('sex') or 2
        sex_note = "" if user_info.get('sex') else " (–Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        params = {
                'age':        user_age,
                'sex':        sex,
                'city_id':    city_id,
                'city_title': city_title,
                'age_from':   max(18, user_age - 5),
                'age_to':     min(99, user_age + 5)
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.user_states[user_id]['search_params'] = params

        message = (
                f"–ü—Ä–∏–≤–µ—Ç, {user_info['name']}!\n"
                f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π üòä\n\n"
                f"üîç –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: {city_title}{city_note}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_age}{age_note}\n"
                f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if sex == 2 else '–ñ–µ–Ω—Å–∫–∏–π'}{sex_note}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {params['age_from']} –¥–æ {params['age_to']} –ª–µ—Ç\n\n"
                "–ù–∞–∂–º–∏ '–ü–æ–∏—Å–∫' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!"
        )
        self.send_message(user_id, message, keyboard=get_main_keyboard())

    def start_search(self, user_id):
        print(f"üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        params = self.user_states[user_id]['search_params']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        age_from = int(params.get('age_from', 18))
        age_to = int(params.get('age_to', 99))

        if age_from < 18: age_from = 18
        if age_to < age_from: age_to = age_from + 5

        params['age_from'] = age_from
        params['age_to'] = age_to

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
        if 'city_id' not in params or not params['city_id']:
            params['city_id'] = DEFAULT_CITY
            params['city_title'] = DEFAULT_CITY_TITLE
            self.send_message(user_id, f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_CITY_TITLE}")

        self.send_message(user_id, "üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...", keyboard=get_empty_keyboard())

        # –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = self.vk_tools.search_users({
                'city_id':  params['city_id'],
                'age_from': params['age_from'],
                'age_to':   params['age_to'],
                'sex':      params['sex']
        }, count=50)

        if not candidates:
            self.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî", keyboard=get_main_keyboard())
            return

        self.search_results[user_id] = candidates
        self.user_states[user_id]['current_index'] = 0

        message = (
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}\n"
                f"–ì–æ—Ä–æ–¥: {params['city_title']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: –æ—Ç {params['age_from']} –¥–æ {params['age_to']} –ª–µ—Ç\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!"
        )
        self.send_message(user_id, message, keyboard=get_search_keyboard())

    def request_manual_city_input(self, user_id):
        """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
        print(f"üåÜ –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        self.user_states[user_id]['state'] = 'waiting_manual_city'
        self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")

    def process_manual_city_input(self, user_id, city_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
        print(f"üåÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ '{city_name}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        cities = self.vk_tools.find_city(city_name)

        if not cities:
            self.send_message(user_id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        city_title = list(cities.keys())[0]
        city_id = cities[city_title]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        session = Session()
        try:
            user = session.query(Users).filter_by(vk_id=user_id).first()
            if user:
                user.city_id = city_id
                user.city_title = city_title
                session.commit()
                print(f"‚úÖ –ì–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {city_title}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        finally:
            session.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        self.user_states[user_id]['search_params']['city_id'] = city_id
        self.user_states[user_id]['search_params']['city_title'] = city_title
        self.user_states[user_id]['state'] = None

        self.send_message(
                user_id,
                f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {city_title}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!",
                keyboard=get_main_keyboard()
        )

    def request_manual_age_input(self, user_id):
        """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        print(f"üéÇ –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        self.user_states[user_id]['state'] = 'waiting_manual_age'
        self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

    def process_manual_age_input(self, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        print(f"üéÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            age = int(text)
            if age < 18 or age > 99:
                self.send_message(user_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 99 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 99:")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        session = Session()
        try:
            user = session.query(Users).filter_by(vk_id=user_id).first()
            if user:
                user.age = age
                session.commit()
                print(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {age}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        finally:
            session.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        params = self.user_states[user_id]['search_params']
        params['age_from'] = max(18, age - 5)
        params['age_to'] = min(99, age + 5)
        self.user_states[user_id]['state'] = None

        self.send_message(
                user_id,
                f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {age} –ª–µ—Ç\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!",
                keyboard=get_main_keyboard()
        )

    def process_city_selection(self, user_id, text):
        if user_id not in self.city_cache or not self.city_cache[user_id]:
            self.send_message(user_id, "–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            self.request_city_input(user_id)
            return

        cities = list(self.city_cache[user_id].keys())
        try:
            choice = int(text)
            if 1 <= choice <= len(cities):
                city_name = cities[choice - 1]
                city_id = self.city_cache[user_id][city_name]
                self.user_states[user_id]['search_params']['city_id'] = city_id
                self.user_states[user_id]['search_params']['city_title'] = city_name
                self.user_states[user_id]['state'] = None
                message = f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {city_name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
                self.send_message(user_id, message, keyboard=get_settings_keyboard())
            else:
                self.send_message(user_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(cities)}:",
                                  keyboard=get_empty_keyboard())
        except ValueError:
            self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", keyboard=get_empty_keyboard())

    def stop_search(self, user_id):
        self.send_message(user_id, "–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
                          keyboard=get_main_keyboard())

    def show_settings(self, user_id):
        params = self.user_states[user_id]['search_params']
        message = (
                f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: {params.get('city_title', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {params.get('age_from', 18)} –¥–æ {params.get('age_to', 99)} –ª–µ—Ç\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        self.send_message(user_id, message, keyboard=get_settings_keyboard())

    def request_city_input(self, user_id):
        self.user_states[user_id]['state'] = 'waiting_city'
        self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):", keyboard=get_empty_keyboard())

    def process_city_input(self, user_id, city_name):
        if len(city_name) < 2:
            self.send_message(user_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        cities = self.vk_tools.find_city(city_name)
        if not cities:
            self.send_message(user_id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return

        self.city_cache[user_id] = cities
        message = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞:\n" + "\n".join(
                [f"{i + 1}. {city}" for i, city in enumerate(cities.keys())]
        )
        message += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"
        self.send_message(user_id, message, keyboard=get_empty_keyboard())
        self.user_states[user_id]['state'] = 'waiting_city_select'

    def request_age_range(self, user_id):
        params = self.user_states[user_id]['search_params']
        message = (
                f"–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {params.get('age_from', 18)} –¥–æ {params.get('age_to', 99)} –ª–µ—Ç\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –ª–µ—Ç):"
        )
        self.send_message(user_id, message, keyboard=get_empty_keyboard())
        self.user_states[user_id]['state'] = 'waiting_age_from'

    def process_age_input(self, user_id, text, age_type):
        try:
            age = int(text)
            if age < 18 or age > 99:
                self.send_message(user_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 99 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 99:")
            return

        params = self.user_states[user_id]['search_params']
        if age_type == 'from':
            params['age_from'] = age
            self.user_states[user_id]['state'] = 'waiting_age_to'
            self.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        else:
            if age < params.get('age_from', 18):
                self.send_message(user_id,
                                  "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            params['age_to'] = age
            self.user_states[user_id]['state'] = None
            message = f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: –æ—Ç {params['age_from']} –¥–æ {params['age_to']} –ª–µ—Ç\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
            self.send_message(user_id, message, keyboard=get_settings_keyboard())

    def send_next_candidate(self, user_id):
        if user_id not in self.search_results or not self.search_results[user_id]:
            self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π '–ü–æ–∏—Å–∫'!")
            return

        idx = self.user_states[user_id].get('current_index', 0)
        if idx >= len(self.search_results[user_id]):
            self.send_message(user_id, "–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return

        candidate = self.search_results[user_id][idx]
        self.user_states[user_id]['current_index'] = idx + 1
        self.user_states[user_id]['current_candidate'] = candidate
        photos = self.vk_tools.get_top_photos(candidate['id'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ë–î
        photos_data = {
                'first_photo':  photos[0] if len(photos) > 0 else None,
                'second_photo': photos[1] if len(photos) > 1 else None,
                'third_photo':  photos[2] if len(photos) > 2 else None,
                'account_link': candidate['profile_link']
        }
        self.save_candidate(user_id, candidate['id'], candidate['name'],
                            None, None, None, None, photos_data)

        message = f"üë§ {candidate['name']}\nüîó –°—Å—ã–ª–∫–∞: {candidate['profile_link']}\nüì∏ –¢–æ–ø-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:"
        self.send_message(user_id, message, attachment=",".join(photos), keyboard=get_search_keyboard())

    def add_to_favorites(self, user_id):
        if user_id not in self.favorites:
            self.favorites[user_id] = []

        candidate = self.user_states[user_id].get('current_candidate')
        if not candidate:
            self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!")
            return

        if candidate not in self.favorites[user_id]:
            self.favorites[user_id].append(candidate)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å—Ç–∞—Ç—É—Å–æ–º 'favorite'
            self.save_interaction(user_id, candidate['id'], 'favorite')
            self.send_message(user_id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", keyboard=get_search_keyboard())
        else:
            self.send_message(user_id, "‚ùå –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!", keyboard=get_search_keyboard())

    def show_favorites(self, user_id):
        session = Session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            favorites = get_favorite_candidates(session, user_id)

            if not favorites:
                self.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            self.send_message(
                    user_id,
                    f"‚≠ê –£ –≤–∞—Å {len(favorites)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:",
                    keyboard=get_main_keyboard()
            )

            time.sleep(0.5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            for i, candidate in enumerate(favorites, 1):
                photos = []
                if candidate.first_photo: photos.append(candidate.first_photo)
                if candidate.second_photo: photos.append(candidate.second_photo)
                if candidate.third_photo: photos.append(candidate.third_photo)

                message = (
                        f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç #{i}:\n"
                        f"üë§ –ò–º—è: {candidate.name}\n"
                        f"üîó –°—Å—ã–ª–∫–∞: https://vk.com/id{candidate.vk_id}"
                )

                self.send_message(
                        user_id,
                        message,
                        attachment=",".join(photos) if photos else None
                )
                time.sleep(0.5)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")
            self.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
        finally:
            session.close()

    def send_help(self, user_id):
        message = (
                "ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n"
                "‚Ä¢ '–ü–æ–∏—Å–∫' - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º\n"
                "‚Ä¢ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω\n"
                "‚Ä¢ '–°–ª–µ–¥—É—é—â–∏–π' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
                "‚Ä¢ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
                "‚Ä¢ '–°—Ç–æ–ø –ø–æ–∏—Å–∫' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫\n"
                "‚Ä¢ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
                "‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥' - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥\n"
                "‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç' - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç\n"
                "‚Ä¢ '–ü–æ–º–æ—â—å' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "–ë–æ—Ç –∏—â–µ—Ç –ª—é–¥–µ–π –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É"
        )
        self.send_message(user_id, message)

    def process_user_info(self, user_id, text):
        self.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º ü§ñ")

    def send_message(self, user_id, message, keyboard=None, attachment=None):
        params = {
                'user_id':   user_id,
                'message':   message,
                'random_id': get_random_id(),
                'keyboard':  keyboard or get_main_keyboard()
        }
        if attachment:
            params['attachment'] = attachment

        for attempt in range(3):
            try:
                self.vk.messages.send(**params)
                break
            except vk_api.exceptions.ApiError as e:
                if e.code == 6:  # Too many requests
                    time.sleep(0.5)
                else:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    break

    def save_user(self, user_id, name, age, gender, city_id, city_title):
        session = Session()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = session.query(Users).filter_by(vk_id=user_id).first()
            if existing_user:
                print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                return True
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            gender_str = "unknown"
            if gender:
                gender_str = "female" if gender == 1 else "male"

            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            name = name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            age = age or DEFAULT_AGE
            city_id = city_id or DEFAULT_CITY
            city_title = city_title or DEFAULT_CITY_TITLE

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = add_user(
                    session=session,
                    vk_id=user_id,
                    name=name,
                    age=age,
                    gender=gender_str,
                    city_id=city_id,
                    city_title=city_title
            )

            session.commit()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
            return True
        except Exception as e:
            session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
        finally:
            session.close()

    def save_candidate(self, user_id, candidate_id, name, age, gender, city_id, city_title, photos_data):
        session = Session()
        try:
            add_candidate_with_link(
                    session,
                    user_vk_id=user_id,
                    candidate_vk_id=candidate_id,
                    name=name,
                    age=age,
                    gender=gender,
                    city_id=city_id,
                    city_title=city_title,
                    photos_data=photos_data
            )
            session.commit()
            return True
        except Exception as e:
            session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            return False
        finally:
            session.close()

    def save_interaction(self, user_id, candidate_id, status):
        session = Session()
        try:
            add_interaction(
                    session,
                    user_vk_id=user_id,
                    candidate_vk_id=candidate_id,
                    status=status
            )
            session.commit()
            return True
        except Exception as e:
            session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return False
        finally:
            session.close()

    def send_next_candidate(self, user_id):
        if user_id not in self.search_results or not self.search_results[user_id]:
            self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π '–ü–æ–∏—Å–∫'!")
            return

        idx = self.user_states[user_id].get('current_index', 0)
        if idx >= len(self.search_results[user_id]):
            self.send_message(user_id, "–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return

        candidate = self.search_results[user_id][idx]
        self.user_states[user_id]['current_index'] = idx + 1
        self.user_states[user_id]['current_candidate'] = candidate
        photos = self.vk_tools.get_top_photos(candidate['id'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ë–î —Å –í–°–ï–ú–ò –¥–∞–Ω–Ω—ã–º–∏
        photos_data = {
                'first_photo':  photos[0] if len(photos) > 0 else None,
                'second_photo': photos[1] if len(photos) > 1 else None,
                'third_photo':  photos[2] if len(photos) > 2 else None,
                'account_link': candidate['profile_link']
        }

        self.save_candidate(
                user_id,
                candidate['id'],
                candidate['name'],
                candidate['age'],  # –í–æ–∑—Ä–∞—Å—Ç
                candidate['gender'],  # –ü–æ–ª
                candidate['city_id'],  # ID –≥–æ—Ä–æ–¥–∞
                candidate['city_title'],  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
                photos_data
        )

        message = f"üë§ {candidate['name']}\nüîó –°—Å—ã–ª–∫–∞: {candidate['profile_link']}\nüì∏ –¢–æ–ø-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:"
        self.send_message(user_id, message, attachment=",".join(photos), keyboard=get_search_keyboard())